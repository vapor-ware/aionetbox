# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import aionetbox
from aionetbox.api.circuits_api import CircuitsApi  # noqa: E501
from aionetbox.rest import ApiException


class TestCircuitsApi(unittest.TestCase):
    """CircuitsApi unit test stubs"""

    def setUp(self):
        self.api = aionetbox.api.circuits_api.CircuitsApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_circuits_choices_list(self):
        """Test case for circuits_choices_list

        """
        pass

    def test_circuits_choices_read(self):
        """Test case for circuits_choices_read

        """
        pass

    def test_circuits_circuit_terminations_create(self):
        """Test case for circuits_circuit_terminations_create

        """
        pass

    def test_circuits_circuit_terminations_delete(self):
        """Test case for circuits_circuit_terminations_delete

        """
        pass

    def test_circuits_circuit_terminations_list(self):
        """Test case for circuits_circuit_terminations_list

        """
        pass

    def test_circuits_circuit_terminations_partial_update(self):
        """Test case for circuits_circuit_terminations_partial_update

        """
        pass

    def test_circuits_circuit_terminations_read(self):
        """Test case for circuits_circuit_terminations_read

        """
        pass

    def test_circuits_circuit_terminations_update(self):
        """Test case for circuits_circuit_terminations_update

        """
        pass

    def test_circuits_circuit_types_create(self):
        """Test case for circuits_circuit_types_create

        """
        pass

    def test_circuits_circuit_types_delete(self):
        """Test case for circuits_circuit_types_delete

        """
        pass

    def test_circuits_circuit_types_list(self):
        """Test case for circuits_circuit_types_list

        """
        pass

    def test_circuits_circuit_types_partial_update(self):
        """Test case for circuits_circuit_types_partial_update

        """
        pass

    def test_circuits_circuit_types_read(self):
        """Test case for circuits_circuit_types_read

        """
        pass

    def test_circuits_circuit_types_update(self):
        """Test case for circuits_circuit_types_update

        """
        pass

    def test_circuits_circuits_create(self):
        """Test case for circuits_circuits_create

        """
        pass

    def test_circuits_circuits_delete(self):
        """Test case for circuits_circuits_delete

        """
        pass

    def test_circuits_circuits_list(self):
        """Test case for circuits_circuits_list

        """
        pass

    def test_circuits_circuits_partial_update(self):
        """Test case for circuits_circuits_partial_update

        """
        pass

    def test_circuits_circuits_read(self):
        """Test case for circuits_circuits_read

        """
        pass

    def test_circuits_circuits_update(self):
        """Test case for circuits_circuits_update

        """
        pass

    def test_circuits_providers_create(self):
        """Test case for circuits_providers_create

        """
        pass

    def test_circuits_providers_delete(self):
        """Test case for circuits_providers_delete

        """
        pass

    def test_circuits_providers_graphs(self):
        """Test case for circuits_providers_graphs

        """
        pass

    def test_circuits_providers_list(self):
        """Test case for circuits_providers_list

        """
        pass

    def test_circuits_providers_partial_update(self):
        """Test case for circuits_providers_partial_update

        """
        pass

    def test_circuits_providers_read(self):
        """Test case for circuits_providers_read

        """
        pass

    def test_circuits_providers_update(self):
        """Test case for circuits_providers_update

        """
        pass


if __name__ == '__main__':
    unittest.main()
