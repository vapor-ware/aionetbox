# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WritableCircuit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'cid': 'str',
        'provider': 'int',
        'type': 'int',
        'status': 'int',
        'tenant': 'int',
        'install_date': 'date',
        'commit_rate': 'int',
        'description': 'str',
        'comments': 'str',
        'tags': 'list[str]',
        'custom_fields': 'object',
        'created': 'date',
        'last_updated': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'cid': 'cid',
        'provider': 'provider',
        'type': 'type',
        'status': 'status',
        'tenant': 'tenant',
        'install_date': 'install_date',
        'commit_rate': 'commit_rate',
        'description': 'description',
        'comments': 'comments',
        'tags': 'tags',
        'custom_fields': 'custom_fields',
        'created': 'created',
        'last_updated': 'last_updated'
    }

    def __init__(self, id=None, cid=None, provider=None, type=None, status=None, tenant=None, install_date=None, commit_rate=None, description=None, comments=None, tags=None, custom_fields=None, created=None, last_updated=None):  # noqa: E501
        """WritableCircuit - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._cid = None
        self._provider = None
        self._type = None
        self._status = None
        self._tenant = None
        self._install_date = None
        self._commit_rate = None
        self._description = None
        self._comments = None
        self._tags = None
        self._custom_fields = None
        self._created = None
        self._last_updated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.cid = cid
        self.provider = provider
        self.type = type
        if status is not None:
            self.status = status
        if tenant is not None:
            self.tenant = tenant
        if install_date is not None:
            self.install_date = install_date
        if commit_rate is not None:
            self.commit_rate = commit_rate
        if description is not None:
            self.description = description
        if comments is not None:
            self.comments = comments
        if tags is not None:
            self.tags = tags
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if created is not None:
            self.created = created
        if last_updated is not None:
            self.last_updated = last_updated

    @property
    def id(self):
        """Gets the id of this WritableCircuit.  # noqa: E501


        :return: The id of this WritableCircuit.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableCircuit.


        :param id: The id of this WritableCircuit.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def cid(self):
        """Gets the cid of this WritableCircuit.  # noqa: E501


        :return: The cid of this WritableCircuit.  # noqa: E501
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this WritableCircuit.


        :param cid: The cid of this WritableCircuit.  # noqa: E501
        :type: str
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")  # noqa: E501
        if cid is not None and len(cid) > 50:
            raise ValueError("Invalid value for `cid`, length must be less than or equal to `50`")  # noqa: E501
        if cid is not None and len(cid) < 1:
            raise ValueError("Invalid value for `cid`, length must be greater than or equal to `1`")  # noqa: E501

        self._cid = cid

    @property
    def provider(self):
        """Gets the provider of this WritableCircuit.  # noqa: E501


        :return: The provider of this WritableCircuit.  # noqa: E501
        :rtype: int
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this WritableCircuit.


        :param provider: The provider of this WritableCircuit.  # noqa: E501
        :type: int
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def type(self):
        """Gets the type of this WritableCircuit.  # noqa: E501


        :return: The type of this WritableCircuit.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritableCircuit.


        :param type: The type of this WritableCircuit.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def status(self):
        """Gets the status of this WritableCircuit.  # noqa: E501


        :return: The status of this WritableCircuit.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WritableCircuit.


        :param status: The status of this WritableCircuit.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def tenant(self):
        """Gets the tenant of this WritableCircuit.  # noqa: E501


        :return: The tenant of this WritableCircuit.  # noqa: E501
        :rtype: int
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this WritableCircuit.


        :param tenant: The tenant of this WritableCircuit.  # noqa: E501
        :type: int
        """

        self._tenant = tenant

    @property
    def install_date(self):
        """Gets the install_date of this WritableCircuit.  # noqa: E501


        :return: The install_date of this WritableCircuit.  # noqa: E501
        :rtype: date
        """
        return self._install_date

    @install_date.setter
    def install_date(self, install_date):
        """Sets the install_date of this WritableCircuit.


        :param install_date: The install_date of this WritableCircuit.  # noqa: E501
        :type: date
        """

        self._install_date = install_date

    @property
    def commit_rate(self):
        """Gets the commit_rate of this WritableCircuit.  # noqa: E501


        :return: The commit_rate of this WritableCircuit.  # noqa: E501
        :rtype: int
        """
        return self._commit_rate

    @commit_rate.setter
    def commit_rate(self, commit_rate):
        """Sets the commit_rate of this WritableCircuit.


        :param commit_rate: The commit_rate of this WritableCircuit.  # noqa: E501
        :type: int
        """
        if commit_rate is not None and commit_rate > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `commit_rate`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if commit_rate is not None and commit_rate < 0:  # noqa: E501
            raise ValueError("Invalid value for `commit_rate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._commit_rate = commit_rate

    @property
    def description(self):
        """Gets the description of this WritableCircuit.  # noqa: E501


        :return: The description of this WritableCircuit.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableCircuit.


        :param description: The description of this WritableCircuit.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def comments(self):
        """Gets the comments of this WritableCircuit.  # noqa: E501


        :return: The comments of this WritableCircuit.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WritableCircuit.


        :param comments: The comments of this WritableCircuit.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def tags(self):
        """Gets the tags of this WritableCircuit.  # noqa: E501


        :return: The tags of this WritableCircuit.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableCircuit.


        :param tags: The tags of this WritableCircuit.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritableCircuit.  # noqa: E501


        :return: The custom_fields of this WritableCircuit.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritableCircuit.


        :param custom_fields: The custom_fields of this WritableCircuit.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    @property
    def created(self):
        """Gets the created of this WritableCircuit.  # noqa: E501


        :return: The created of this WritableCircuit.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableCircuit.


        :param created: The created of this WritableCircuit.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def last_updated(self):
        """Gets the last_updated of this WritableCircuit.  # noqa: E501


        :return: The last_updated of this WritableCircuit.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritableCircuit.


        :param last_updated: The last_updated of this WritableCircuit.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WritableCircuit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WritableCircuit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
