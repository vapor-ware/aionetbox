# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from aionetbox.models.nested_device import NestedDevice  # noqa: F401,E501


class VirtualChassis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'master': 'NestedDevice',
        'domain': 'str',
        'tags': 'list[str]',
        'member_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'master': 'master',
        'domain': 'domain',
        'tags': 'tags',
        'member_count': 'member_count'
    }

    def __init__(self, id=None, master=None, domain=None, tags=None, member_count=None):  # noqa: E501
        """VirtualChassis - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._master = None
        self._domain = None
        self._tags = None
        self._member_count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.master = master
        if domain is not None:
            self.domain = domain
        if tags is not None:
            self.tags = tags
        if member_count is not None:
            self.member_count = member_count

    @property
    def id(self):
        """Gets the id of this VirtualChassis.  # noqa: E501


        :return: The id of this VirtualChassis.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualChassis.


        :param id: The id of this VirtualChassis.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def master(self):
        """Gets the master of this VirtualChassis.  # noqa: E501


        :return: The master of this VirtualChassis.  # noqa: E501
        :rtype: NestedDevice
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this VirtualChassis.


        :param master: The master of this VirtualChassis.  # noqa: E501
        :type: NestedDevice
        """
        if master is None:
            raise ValueError("Invalid value for `master`, must not be `None`")  # noqa: E501

        self._master = master

    @property
    def domain(self):
        """Gets the domain of this VirtualChassis.  # noqa: E501


        :return: The domain of this VirtualChassis.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this VirtualChassis.


        :param domain: The domain of this VirtualChassis.  # noqa: E501
        :type: str
        """
        if domain is not None and len(domain) > 30:
            raise ValueError("Invalid value for `domain`, length must be less than or equal to `30`")  # noqa: E501

        self._domain = domain

    @property
    def tags(self):
        """Gets the tags of this VirtualChassis.  # noqa: E501


        :return: The tags of this VirtualChassis.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VirtualChassis.


        :param tags: The tags of this VirtualChassis.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def member_count(self):
        """Gets the member_count of this VirtualChassis.  # noqa: E501


        :return: The member_count of this VirtualChassis.  # noqa: E501
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this VirtualChassis.


        :param member_count: The member_count of this VirtualChassis.  # noqa: E501
        :type: int
        """

        self._member_count = member_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualChassis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualChassis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
