# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WritableRack(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'facility_id': 'str',
        'display_name': 'str',
        'site': 'int',
        'group': 'int',
        'tenant': 'int',
        'status': 'int',
        'role': 'int',
        'serial': 'str',
        'asset_tag': 'str',
        'type': 'int',
        'width': 'int',
        'u_height': 'int',
        'desc_units': 'bool',
        'outer_width': 'int',
        'outer_depth': 'int',
        'outer_unit': 'int',
        'comments': 'str',
        'tags': 'list[str]',
        'custom_fields': 'object',
        'created': 'date',
        'last_updated': 'datetime',
        'device_count': 'int',
        'powerfeed_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'facility_id': 'facility_id',
        'display_name': 'display_name',
        'site': 'site',
        'group': 'group',
        'tenant': 'tenant',
        'status': 'status',
        'role': 'role',
        'serial': 'serial',
        'asset_tag': 'asset_tag',
        'type': 'type',
        'width': 'width',
        'u_height': 'u_height',
        'desc_units': 'desc_units',
        'outer_width': 'outer_width',
        'outer_depth': 'outer_depth',
        'outer_unit': 'outer_unit',
        'comments': 'comments',
        'tags': 'tags',
        'custom_fields': 'custom_fields',
        'created': 'created',
        'last_updated': 'last_updated',
        'device_count': 'device_count',
        'powerfeed_count': 'powerfeed_count'
    }

    def __init__(self, id=None, name=None, facility_id=None, display_name=None, site=None, group=None, tenant=None, status=None, role=None, serial=None, asset_tag=None, type=None, width=None, u_height=None, desc_units=None, outer_width=None, outer_depth=None, outer_unit=None, comments=None, tags=None, custom_fields=None, created=None, last_updated=None, device_count=None, powerfeed_count=None):  # noqa: E501
        """WritableRack - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._facility_id = None
        self._display_name = None
        self._site = None
        self._group = None
        self._tenant = None
        self._status = None
        self._role = None
        self._serial = None
        self._asset_tag = None
        self._type = None
        self._width = None
        self._u_height = None
        self._desc_units = None
        self._outer_width = None
        self._outer_depth = None
        self._outer_unit = None
        self._comments = None
        self._tags = None
        self._custom_fields = None
        self._created = None
        self._last_updated = None
        self._device_count = None
        self._powerfeed_count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if facility_id is not None:
            self.facility_id = facility_id
        if display_name is not None:
            self.display_name = display_name
        self.site = site
        if group is not None:
            self.group = group
        if tenant is not None:
            self.tenant = tenant
        if status is not None:
            self.status = status
        if role is not None:
            self.role = role
        if serial is not None:
            self.serial = serial
        if asset_tag is not None:
            self.asset_tag = asset_tag
        if type is not None:
            self.type = type
        if width is not None:
            self.width = width
        if u_height is not None:
            self.u_height = u_height
        if desc_units is not None:
            self.desc_units = desc_units
        if outer_width is not None:
            self.outer_width = outer_width
        if outer_depth is not None:
            self.outer_depth = outer_depth
        if outer_unit is not None:
            self.outer_unit = outer_unit
        if comments is not None:
            self.comments = comments
        if tags is not None:
            self.tags = tags
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if created is not None:
            self.created = created
        if last_updated is not None:
            self.last_updated = last_updated
        if device_count is not None:
            self.device_count = device_count
        if powerfeed_count is not None:
            self.powerfeed_count = powerfeed_count

    @property
    def id(self):
        """Gets the id of this WritableRack.  # noqa: E501


        :return: The id of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableRack.


        :param id: The id of this WritableRack.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WritableRack.  # noqa: E501


        :return: The name of this WritableRack.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableRack.


        :param name: The name of this WritableRack.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def facility_id(self):
        """Gets the facility_id of this WritableRack.  # noqa: E501


        :return: The facility_id of this WritableRack.  # noqa: E501
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this WritableRack.


        :param facility_id: The facility_id of this WritableRack.  # noqa: E501
        :type: str
        """
        if facility_id is not None and len(facility_id) > 50:
            raise ValueError("Invalid value for `facility_id`, length must be less than or equal to `50`")  # noqa: E501

        self._facility_id = facility_id

    @property
    def display_name(self):
        """Gets the display_name of this WritableRack.  # noqa: E501


        :return: The display_name of this WritableRack.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this WritableRack.


        :param display_name: The display_name of this WritableRack.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def site(self):
        """Gets the site of this WritableRack.  # noqa: E501


        :return: The site of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this WritableRack.


        :param site: The site of this WritableRack.  # noqa: E501
        :type: int
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")  # noqa: E501

        self._site = site

    @property
    def group(self):
        """Gets the group of this WritableRack.  # noqa: E501


        :return: The group of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this WritableRack.


        :param group: The group of this WritableRack.  # noqa: E501
        :type: int
        """

        self._group = group

    @property
    def tenant(self):
        """Gets the tenant of this WritableRack.  # noqa: E501


        :return: The tenant of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this WritableRack.


        :param tenant: The tenant of this WritableRack.  # noqa: E501
        :type: int
        """

        self._tenant = tenant

    @property
    def status(self):
        """Gets the status of this WritableRack.  # noqa: E501


        :return: The status of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WritableRack.


        :param status: The status of this WritableRack.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def role(self):
        """Gets the role of this WritableRack.  # noqa: E501


        :return: The role of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this WritableRack.


        :param role: The role of this WritableRack.  # noqa: E501
        :type: int
        """

        self._role = role

    @property
    def serial(self):
        """Gets the serial of this WritableRack.  # noqa: E501


        :return: The serial of this WritableRack.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this WritableRack.


        :param serial: The serial of this WritableRack.  # noqa: E501
        :type: str
        """
        if serial is not None and len(serial) > 50:
            raise ValueError("Invalid value for `serial`, length must be less than or equal to `50`")  # noqa: E501

        self._serial = serial

    @property
    def asset_tag(self):
        """Gets the asset_tag of this WritableRack.  # noqa: E501

        A unique tag used to identify this rack  # noqa: E501

        :return: The asset_tag of this WritableRack.  # noqa: E501
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this WritableRack.

        A unique tag used to identify this rack  # noqa: E501

        :param asset_tag: The asset_tag of this WritableRack.  # noqa: E501
        :type: str
        """
        if asset_tag is not None and len(asset_tag) > 50:
            raise ValueError("Invalid value for `asset_tag`, length must be less than or equal to `50`")  # noqa: E501

        self._asset_tag = asset_tag

    @property
    def type(self):
        """Gets the type of this WritableRack.  # noqa: E501


        :return: The type of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritableRack.


        :param type: The type of this WritableRack.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def width(self):
        """Gets the width of this WritableRack.  # noqa: E501

        Rail-to-rail width  # noqa: E501

        :return: The width of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this WritableRack.

        Rail-to-rail width  # noqa: E501

        :param width: The width of this WritableRack.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def u_height(self):
        """Gets the u_height of this WritableRack.  # noqa: E501


        :return: The u_height of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._u_height

    @u_height.setter
    def u_height(self, u_height):
        """Sets the u_height of this WritableRack.


        :param u_height: The u_height of this WritableRack.  # noqa: E501
        :type: int
        """
        if u_height is not None and u_height > 100:  # noqa: E501
            raise ValueError("Invalid value for `u_height`, must be a value less than or equal to `100`")  # noqa: E501
        if u_height is not None and u_height < 1:  # noqa: E501
            raise ValueError("Invalid value for `u_height`, must be a value greater than or equal to `1`")  # noqa: E501

        self._u_height = u_height

    @property
    def desc_units(self):
        """Gets the desc_units of this WritableRack.  # noqa: E501

        Units are numbered top-to-bottom  # noqa: E501

        :return: The desc_units of this WritableRack.  # noqa: E501
        :rtype: bool
        """
        return self._desc_units

    @desc_units.setter
    def desc_units(self, desc_units):
        """Sets the desc_units of this WritableRack.

        Units are numbered top-to-bottom  # noqa: E501

        :param desc_units: The desc_units of this WritableRack.  # noqa: E501
        :type: bool
        """

        self._desc_units = desc_units

    @property
    def outer_width(self):
        """Gets the outer_width of this WritableRack.  # noqa: E501


        :return: The outer_width of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._outer_width

    @outer_width.setter
    def outer_width(self, outer_width):
        """Sets the outer_width of this WritableRack.


        :param outer_width: The outer_width of this WritableRack.  # noqa: E501
        :type: int
        """
        if outer_width is not None and outer_width > 32767:  # noqa: E501
            raise ValueError("Invalid value for `outer_width`, must be a value less than or equal to `32767`")  # noqa: E501
        if outer_width is not None and outer_width < 0:  # noqa: E501
            raise ValueError("Invalid value for `outer_width`, must be a value greater than or equal to `0`")  # noqa: E501

        self._outer_width = outer_width

    @property
    def outer_depth(self):
        """Gets the outer_depth of this WritableRack.  # noqa: E501


        :return: The outer_depth of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._outer_depth

    @outer_depth.setter
    def outer_depth(self, outer_depth):
        """Sets the outer_depth of this WritableRack.


        :param outer_depth: The outer_depth of this WritableRack.  # noqa: E501
        :type: int
        """
        if outer_depth is not None and outer_depth > 32767:  # noqa: E501
            raise ValueError("Invalid value for `outer_depth`, must be a value less than or equal to `32767`")  # noqa: E501
        if outer_depth is not None and outer_depth < 0:  # noqa: E501
            raise ValueError("Invalid value for `outer_depth`, must be a value greater than or equal to `0`")  # noqa: E501

        self._outer_depth = outer_depth

    @property
    def outer_unit(self):
        """Gets the outer_unit of this WritableRack.  # noqa: E501


        :return: The outer_unit of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._outer_unit

    @outer_unit.setter
    def outer_unit(self, outer_unit):
        """Sets the outer_unit of this WritableRack.


        :param outer_unit: The outer_unit of this WritableRack.  # noqa: E501
        :type: int
        """

        self._outer_unit = outer_unit

    @property
    def comments(self):
        """Gets the comments of this WritableRack.  # noqa: E501


        :return: The comments of this WritableRack.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WritableRack.


        :param comments: The comments of this WritableRack.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def tags(self):
        """Gets the tags of this WritableRack.  # noqa: E501


        :return: The tags of this WritableRack.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableRack.


        :param tags: The tags of this WritableRack.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritableRack.  # noqa: E501


        :return: The custom_fields of this WritableRack.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritableRack.


        :param custom_fields: The custom_fields of this WritableRack.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    @property
    def created(self):
        """Gets the created of this WritableRack.  # noqa: E501


        :return: The created of this WritableRack.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableRack.


        :param created: The created of this WritableRack.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def last_updated(self):
        """Gets the last_updated of this WritableRack.  # noqa: E501


        :return: The last_updated of this WritableRack.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritableRack.


        :param last_updated: The last_updated of this WritableRack.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def device_count(self):
        """Gets the device_count of this WritableRack.  # noqa: E501


        :return: The device_count of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this WritableRack.


        :param device_count: The device_count of this WritableRack.  # noqa: E501
        :type: int
        """

        self._device_count = device_count

    @property
    def powerfeed_count(self):
        """Gets the powerfeed_count of this WritableRack.  # noqa: E501


        :return: The powerfeed_count of this WritableRack.  # noqa: E501
        :rtype: int
        """
        return self._powerfeed_count

    @powerfeed_count.setter
    def powerfeed_count(self, powerfeed_count):
        """Sets the powerfeed_count of this WritableRack.


        :param powerfeed_count: The powerfeed_count of this WritableRack.  # noqa: E501
        :type: int
        """

        self._powerfeed_count = powerfeed_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WritableRack, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WritableRack):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
