# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from aionetbox.models.status import Status  # noqa: F401,E501


class ExportTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'content_type': 'int',
        'name': 'str',
        'description': 'str',
        'template_language': 'Status',
        'template_code': 'str',
        'mime_type': 'str',
        'file_extension': 'str'
    }

    attribute_map = {
        'id': 'id',
        'content_type': 'content_type',
        'name': 'name',
        'description': 'description',
        'template_language': 'template_language',
        'template_code': 'template_code',
        'mime_type': 'mime_type',
        'file_extension': 'file_extension'
    }

    def __init__(self, id=None, content_type=None, name=None, description=None, template_language=None, template_code=None, mime_type=None, file_extension=None):  # noqa: E501
        """ExportTemplate - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._content_type = None
        self._name = None
        self._description = None
        self._template_language = None
        self._template_code = None
        self._mime_type = None
        self._file_extension = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.content_type = content_type
        self.name = name
        if description is not None:
            self.description = description
        if template_language is not None:
            self.template_language = template_language
        self.template_code = template_code
        if mime_type is not None:
            self.mime_type = mime_type
        if file_extension is not None:
            self.file_extension = file_extension

    @property
    def id(self):
        """Gets the id of this ExportTemplate.  # noqa: E501


        :return: The id of this ExportTemplate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExportTemplate.


        :param id: The id of this ExportTemplate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def content_type(self):
        """Gets the content_type of this ExportTemplate.  # noqa: E501


        :return: The content_type of this ExportTemplate.  # noqa: E501
        :rtype: int
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ExportTemplate.


        :param content_type: The content_type of this ExportTemplate.  # noqa: E501
        :type: int
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501

        self._content_type = content_type

    @property
    def name(self):
        """Gets the name of this ExportTemplate.  # noqa: E501


        :return: The name of this ExportTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExportTemplate.


        :param name: The name of this ExportTemplate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ExportTemplate.  # noqa: E501


        :return: The description of this ExportTemplate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExportTemplate.


        :param description: The description of this ExportTemplate.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501

        self._description = description

    @property
    def template_language(self):
        """Gets the template_language of this ExportTemplate.  # noqa: E501


        :return: The template_language of this ExportTemplate.  # noqa: E501
        :rtype: Status
        """
        return self._template_language

    @template_language.setter
    def template_language(self, template_language):
        """Sets the template_language of this ExportTemplate.


        :param template_language: The template_language of this ExportTemplate.  # noqa: E501
        :type: Status
        """

        self._template_language = template_language

    @property
    def template_code(self):
        """Gets the template_code of this ExportTemplate.  # noqa: E501

        The list of objects being exported is passed as a context variable named <code>queryset</code>.  # noqa: E501

        :return: The template_code of this ExportTemplate.  # noqa: E501
        :rtype: str
        """
        return self._template_code

    @template_code.setter
    def template_code(self, template_code):
        """Sets the template_code of this ExportTemplate.

        The list of objects being exported is passed as a context variable named <code>queryset</code>.  # noqa: E501

        :param template_code: The template_code of this ExportTemplate.  # noqa: E501
        :type: str
        """
        if template_code is None:
            raise ValueError("Invalid value for `template_code`, must not be `None`")  # noqa: E501
        if template_code is not None and len(template_code) < 1:
            raise ValueError("Invalid value for `template_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._template_code = template_code

    @property
    def mime_type(self):
        """Gets the mime_type of this ExportTemplate.  # noqa: E501

        Defaults to <code>text/plain</code>  # noqa: E501

        :return: The mime_type of this ExportTemplate.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this ExportTemplate.

        Defaults to <code>text/plain</code>  # noqa: E501

        :param mime_type: The mime_type of this ExportTemplate.  # noqa: E501
        :type: str
        """
        if mime_type is not None and len(mime_type) > 50:
            raise ValueError("Invalid value for `mime_type`, length must be less than or equal to `50`")  # noqa: E501

        self._mime_type = mime_type

    @property
    def file_extension(self):
        """Gets the file_extension of this ExportTemplate.  # noqa: E501

        Extension to append to the rendered filename  # noqa: E501

        :return: The file_extension of this ExportTemplate.  # noqa: E501
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this ExportTemplate.

        Extension to append to the rendered filename  # noqa: E501

        :param file_extension: The file_extension of this ExportTemplate.  # noqa: E501
        :type: str
        """
        if file_extension is not None and len(file_extension) > 15:
            raise ValueError("Invalid value for `file_extension`, length must be less than or equal to `15`")  # noqa: E501

        self._file_extension = file_extension

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
