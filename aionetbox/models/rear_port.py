# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from aionetbox.models.nested_cable import NestedCable  # noqa: F401,E501
from aionetbox.models.nested_device import NestedDevice  # noqa: F401,E501
from aionetbox.models.status import Status  # noqa: F401,E501


class RearPort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'device': 'NestedDevice',
        'name': 'str',
        'type': 'Status',
        'positions': 'int',
        'description': 'str',
        'cable': 'NestedCable',
        'tags': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'device': 'device',
        'name': 'name',
        'type': 'type',
        'positions': 'positions',
        'description': 'description',
        'cable': 'cable',
        'tags': 'tags'
    }

    def __init__(self, id=None, device=None, name=None, type=None, positions=None, description=None, cable=None, tags=None):  # noqa: E501
        """RearPort - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._device = None
        self._name = None
        self._type = None
        self._positions = None
        self._description = None
        self._cable = None
        self._tags = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.device = device
        self.name = name
        self.type = type
        if positions is not None:
            self.positions = positions
        if description is not None:
            self.description = description
        if cable is not None:
            self.cable = cable
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this RearPort.  # noqa: E501


        :return: The id of this RearPort.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RearPort.


        :param id: The id of this RearPort.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def device(self):
        """Gets the device of this RearPort.  # noqa: E501


        :return: The device of this RearPort.  # noqa: E501
        :rtype: NestedDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this RearPort.


        :param device: The device of this RearPort.  # noqa: E501
        :type: NestedDevice
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    @property
    def name(self):
        """Gets the name of this RearPort.  # noqa: E501


        :return: The name of this RearPort.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RearPort.


        :param name: The name of this RearPort.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this RearPort.  # noqa: E501


        :return: The type of this RearPort.  # noqa: E501
        :rtype: Status
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RearPort.


        :param type: The type of this RearPort.  # noqa: E501
        :type: Status
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def positions(self):
        """Gets the positions of this RearPort.  # noqa: E501


        :return: The positions of this RearPort.  # noqa: E501
        :rtype: int
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this RearPort.


        :param positions: The positions of this RearPort.  # noqa: E501
        :type: int
        """
        if positions is not None and positions > 64:  # noqa: E501
            raise ValueError("Invalid value for `positions`, must be a value less than or equal to `64`")  # noqa: E501
        if positions is not None and positions < 1:  # noqa: E501
            raise ValueError("Invalid value for `positions`, must be a value greater than or equal to `1`")  # noqa: E501

        self._positions = positions

    @property
    def description(self):
        """Gets the description of this RearPort.  # noqa: E501


        :return: The description of this RearPort.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RearPort.


        :param description: The description of this RearPort.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def cable(self):
        """Gets the cable of this RearPort.  # noqa: E501


        :return: The cable of this RearPort.  # noqa: E501
        :rtype: NestedCable
        """
        return self._cable

    @cable.setter
    def cable(self, cable):
        """Sets the cable of this RearPort.


        :param cable: The cable of this RearPort.  # noqa: E501
        :type: NestedCable
        """

        self._cable = cable

    @property
    def tags(self):
        """Gets the tags of this RearPort.  # noqa: E501


        :return: The tags of this RearPort.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RearPort.


        :param tags: The tags of this RearPort.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RearPort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RearPort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
