# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WritableRackReservation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'rack': 'int',
        'units': 'list[int]',
        'created': 'date',
        'user': 'int',
        'tenant': 'int',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'rack': 'rack',
        'units': 'units',
        'created': 'created',
        'user': 'user',
        'tenant': 'tenant',
        'description': 'description'
    }

    def __init__(self, id=None, rack=None, units=None, created=None, user=None, tenant=None, description=None):  # noqa: E501
        """WritableRackReservation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._rack = None
        self._units = None
        self._created = None
        self._user = None
        self._tenant = None
        self._description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.rack = rack
        self.units = units
        if created is not None:
            self.created = created
        self.user = user
        if tenant is not None:
            self.tenant = tenant
        self.description = description

    @property
    def id(self):
        """Gets the id of this WritableRackReservation.  # noqa: E501


        :return: The id of this WritableRackReservation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableRackReservation.


        :param id: The id of this WritableRackReservation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def rack(self):
        """Gets the rack of this WritableRackReservation.  # noqa: E501


        :return: The rack of this WritableRackReservation.  # noqa: E501
        :rtype: int
        """
        return self._rack

    @rack.setter
    def rack(self, rack):
        """Sets the rack of this WritableRackReservation.


        :param rack: The rack of this WritableRackReservation.  # noqa: E501
        :type: int
        """
        if rack is None:
            raise ValueError("Invalid value for `rack`, must not be `None`")  # noqa: E501

        self._rack = rack

    @property
    def units(self):
        """Gets the units of this WritableRackReservation.  # noqa: E501


        :return: The units of this WritableRackReservation.  # noqa: E501
        :rtype: list[int]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this WritableRackReservation.


        :param units: The units of this WritableRackReservation.  # noqa: E501
        :type: list[int]
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")  # noqa: E501

        self._units = units

    @property
    def created(self):
        """Gets the created of this WritableRackReservation.  # noqa: E501


        :return: The created of this WritableRackReservation.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableRackReservation.


        :param created: The created of this WritableRackReservation.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def user(self):
        """Gets the user of this WritableRackReservation.  # noqa: E501


        :return: The user of this WritableRackReservation.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this WritableRackReservation.


        :param user: The user of this WritableRackReservation.  # noqa: E501
        :type: int
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def tenant(self):
        """Gets the tenant of this WritableRackReservation.  # noqa: E501


        :return: The tenant of this WritableRackReservation.  # noqa: E501
        :rtype: int
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this WritableRackReservation.


        :param tenant: The tenant of this WritableRackReservation.  # noqa: E501
        :type: int
        """

        self._tenant = tenant

    @property
    def description(self):
        """Gets the description of this WritableRackReservation.  # noqa: E501


        :return: The description of this WritableRackReservation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableRackReservation.


        :param description: The description of this WritableRackReservation.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WritableRackReservation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WritableRackReservation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
