# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from aionetbox.models.nested_rir import NestedRIR  # noqa: F401,E501


class Aggregate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'family': 'int',
        'prefix': 'str',
        'rir': 'NestedRIR',
        'date_added': 'date',
        'description': 'str',
        'tags': 'list[str]',
        'custom_fields': 'object',
        'created': 'date',
        'last_updated': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'family': 'family',
        'prefix': 'prefix',
        'rir': 'rir',
        'date_added': 'date_added',
        'description': 'description',
        'tags': 'tags',
        'custom_fields': 'custom_fields',
        'created': 'created',
        'last_updated': 'last_updated'
    }

    def __init__(self, id=None, family=None, prefix=None, rir=None, date_added=None, description=None, tags=None, custom_fields=None, created=None, last_updated=None):  # noqa: E501
        """Aggregate - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._family = None
        self._prefix = None
        self._rir = None
        self._date_added = None
        self._description = None
        self._tags = None
        self._custom_fields = None
        self._created = None
        self._last_updated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if family is not None:
            self.family = family
        self.prefix = prefix
        self.rir = rir
        if date_added is not None:
            self.date_added = date_added
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if created is not None:
            self.created = created
        if last_updated is not None:
            self.last_updated = last_updated

    @property
    def id(self):
        """Gets the id of this Aggregate.  # noqa: E501


        :return: The id of this Aggregate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Aggregate.


        :param id: The id of this Aggregate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def family(self):
        """Gets the family of this Aggregate.  # noqa: E501


        :return: The family of this Aggregate.  # noqa: E501
        :rtype: int
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this Aggregate.


        :param family: The family of this Aggregate.  # noqa: E501
        :type: int
        """

        self._family = family

    @property
    def prefix(self):
        """Gets the prefix of this Aggregate.  # noqa: E501


        :return: The prefix of this Aggregate.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Aggregate.


        :param prefix: The prefix of this Aggregate.  # noqa: E501
        :type: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    @property
    def rir(self):
        """Gets the rir of this Aggregate.  # noqa: E501


        :return: The rir of this Aggregate.  # noqa: E501
        :rtype: NestedRIR
        """
        return self._rir

    @rir.setter
    def rir(self, rir):
        """Sets the rir of this Aggregate.


        :param rir: The rir of this Aggregate.  # noqa: E501
        :type: NestedRIR
        """
        if rir is None:
            raise ValueError("Invalid value for `rir`, must not be `None`")  # noqa: E501

        self._rir = rir

    @property
    def date_added(self):
        """Gets the date_added of this Aggregate.  # noqa: E501


        :return: The date_added of this Aggregate.  # noqa: E501
        :rtype: date
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added):
        """Sets the date_added of this Aggregate.


        :param date_added: The date_added of this Aggregate.  # noqa: E501
        :type: date
        """

        self._date_added = date_added

    @property
    def description(self):
        """Gets the description of this Aggregate.  # noqa: E501


        :return: The description of this Aggregate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Aggregate.


        :param description: The description of this Aggregate.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this Aggregate.  # noqa: E501


        :return: The tags of this Aggregate.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Aggregate.


        :param tags: The tags of this Aggregate.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Aggregate.  # noqa: E501


        :return: The custom_fields of this Aggregate.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Aggregate.


        :param custom_fields: The custom_fields of this Aggregate.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    @property
    def created(self):
        """Gets the created of this Aggregate.  # noqa: E501


        :return: The created of this Aggregate.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Aggregate.


        :param created: The created of this Aggregate.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def last_updated(self):
        """Gets the last_updated of this Aggregate.  # noqa: E501


        :return: The last_updated of this Aggregate.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Aggregate.


        :param last_updated: The last_updated of this Aggregate.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Aggregate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Aggregate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
