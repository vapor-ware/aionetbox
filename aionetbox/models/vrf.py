# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from aionetbox.models.nested_tenant import NestedTenant  # noqa: F401,E501


class VRF(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'rd': 'str',
        'tenant': 'NestedTenant',
        'enforce_unique': 'bool',
        'description': 'str',
        'tags': 'list[str]',
        'display_name': 'str',
        'custom_fields': 'object',
        'created': 'date',
        'last_updated': 'datetime',
        'ipaddress_count': 'int',
        'prefix_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'rd': 'rd',
        'tenant': 'tenant',
        'enforce_unique': 'enforce_unique',
        'description': 'description',
        'tags': 'tags',
        'display_name': 'display_name',
        'custom_fields': 'custom_fields',
        'created': 'created',
        'last_updated': 'last_updated',
        'ipaddress_count': 'ipaddress_count',
        'prefix_count': 'prefix_count'
    }

    def __init__(self, id=None, name=None, rd=None, tenant=None, enforce_unique=None, description=None, tags=None, display_name=None, custom_fields=None, created=None, last_updated=None, ipaddress_count=None, prefix_count=None):  # noqa: E501
        """VRF - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._rd = None
        self._tenant = None
        self._enforce_unique = None
        self._description = None
        self._tags = None
        self._display_name = None
        self._custom_fields = None
        self._created = None
        self._last_updated = None
        self._ipaddress_count = None
        self._prefix_count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if rd is not None:
            self.rd = rd
        if tenant is not None:
            self.tenant = tenant
        if enforce_unique is not None:
            self.enforce_unique = enforce_unique
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if display_name is not None:
            self.display_name = display_name
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if created is not None:
            self.created = created
        if last_updated is not None:
            self.last_updated = last_updated
        if ipaddress_count is not None:
            self.ipaddress_count = ipaddress_count
        if prefix_count is not None:
            self.prefix_count = prefix_count

    @property
    def id(self):
        """Gets the id of this VRF.  # noqa: E501


        :return: The id of this VRF.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VRF.


        :param id: The id of this VRF.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VRF.  # noqa: E501


        :return: The name of this VRF.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VRF.


        :param name: The name of this VRF.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def rd(self):
        """Gets the rd of this VRF.  # noqa: E501


        :return: The rd of this VRF.  # noqa: E501
        :rtype: str
        """
        return self._rd

    @rd.setter
    def rd(self, rd):
        """Sets the rd of this VRF.


        :param rd: The rd of this VRF.  # noqa: E501
        :type: str
        """
        if rd is not None and len(rd) > 21:
            raise ValueError("Invalid value for `rd`, length must be less than or equal to `21`")  # noqa: E501

        self._rd = rd

    @property
    def tenant(self):
        """Gets the tenant of this VRF.  # noqa: E501


        :return: The tenant of this VRF.  # noqa: E501
        :rtype: NestedTenant
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this VRF.


        :param tenant: The tenant of this VRF.  # noqa: E501
        :type: NestedTenant
        """

        self._tenant = tenant

    @property
    def enforce_unique(self):
        """Gets the enforce_unique of this VRF.  # noqa: E501

        Prevent duplicate prefixes/IP addresses within this VRF  # noqa: E501

        :return: The enforce_unique of this VRF.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_unique

    @enforce_unique.setter
    def enforce_unique(self, enforce_unique):
        """Sets the enforce_unique of this VRF.

        Prevent duplicate prefixes/IP addresses within this VRF  # noqa: E501

        :param enforce_unique: The enforce_unique of this VRF.  # noqa: E501
        :type: bool
        """

        self._enforce_unique = enforce_unique

    @property
    def description(self):
        """Gets the description of this VRF.  # noqa: E501


        :return: The description of this VRF.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VRF.


        :param description: The description of this VRF.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this VRF.  # noqa: E501


        :return: The tags of this VRF.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VRF.


        :param tags: The tags of this VRF.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def display_name(self):
        """Gets the display_name of this VRF.  # noqa: E501


        :return: The display_name of this VRF.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this VRF.


        :param display_name: The display_name of this VRF.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def custom_fields(self):
        """Gets the custom_fields of this VRF.  # noqa: E501


        :return: The custom_fields of this VRF.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this VRF.


        :param custom_fields: The custom_fields of this VRF.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    @property
    def created(self):
        """Gets the created of this VRF.  # noqa: E501


        :return: The created of this VRF.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this VRF.


        :param created: The created of this VRF.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def last_updated(self):
        """Gets the last_updated of this VRF.  # noqa: E501


        :return: The last_updated of this VRF.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this VRF.


        :param last_updated: The last_updated of this VRF.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def ipaddress_count(self):
        """Gets the ipaddress_count of this VRF.  # noqa: E501


        :return: The ipaddress_count of this VRF.  # noqa: E501
        :rtype: int
        """
        return self._ipaddress_count

    @ipaddress_count.setter
    def ipaddress_count(self, ipaddress_count):
        """Sets the ipaddress_count of this VRF.


        :param ipaddress_count: The ipaddress_count of this VRF.  # noqa: E501
        :type: int
        """

        self._ipaddress_count = ipaddress_count

    @property
    def prefix_count(self):
        """Gets the prefix_count of this VRF.  # noqa: E501


        :return: The prefix_count of this VRF.  # noqa: E501
        :rtype: int
        """
        return self._prefix_count

    @prefix_count.setter
    def prefix_count(self, prefix_count):
        """Sets the prefix_count of this VRF.


        :param prefix_count: The prefix_count of this VRF.  # noqa: E501
        :type: int
        """

        self._prefix_count = prefix_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VRF, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VRF):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
