# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WritableGraph(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'int',
        'weight': 'int',
        'name': 'str',
        'source': 'str',
        'link': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'weight': 'weight',
        'name': 'name',
        'source': 'source',
        'link': 'link'
    }

    def __init__(self, id=None, type=None, weight=None, name=None, source=None, link=None):  # noqa: E501
        """WritableGraph - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._weight = None
        self._name = None
        self._source = None
        self._link = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.type = type
        if weight is not None:
            self.weight = weight
        self.name = name
        self.source = source
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this WritableGraph.  # noqa: E501


        :return: The id of this WritableGraph.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableGraph.


        :param id: The id of this WritableGraph.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this WritableGraph.  # noqa: E501


        :return: The type of this WritableGraph.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritableGraph.


        :param type: The type of this WritableGraph.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def weight(self):
        """Gets the weight of this WritableGraph.  # noqa: E501


        :return: The weight of this WritableGraph.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this WritableGraph.


        :param weight: The weight of this WritableGraph.  # noqa: E501
        :type: int
        """
        if weight is not None and weight > 32767:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `32767`")  # noqa: E501
        if weight is not None and weight < 0:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `0`")  # noqa: E501

        self._weight = weight

    @property
    def name(self):
        """Gets the name of this WritableGraph.  # noqa: E501


        :return: The name of this WritableGraph.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableGraph.


        :param name: The name of this WritableGraph.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def source(self):
        """Gets the source of this WritableGraph.  # noqa: E501


        :return: The source of this WritableGraph.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this WritableGraph.


        :param source: The source of this WritableGraph.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501
        if source is not None and len(source) > 500:
            raise ValueError("Invalid value for `source`, length must be less than or equal to `500`")  # noqa: E501
        if source is not None and len(source) < 1:
            raise ValueError("Invalid value for `source`, length must be greater than or equal to `1`")  # noqa: E501

        self._source = source

    @property
    def link(self):
        """Gets the link of this WritableGraph.  # noqa: E501


        :return: The link of this WritableGraph.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this WritableGraph.


        :param link: The link of this WritableGraph.  # noqa: E501
        :type: str
        """
        if link is not None and len(link) > 200:
            raise ValueError("Invalid value for `link`, length must be less than or equal to `200`")  # noqa: E501

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WritableGraph, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WritableGraph):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
