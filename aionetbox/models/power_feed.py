# coding: utf-8

"""
    NetBox API

    API to access NetBox  # noqa: E501

    OpenAPI spec version: 2.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from aionetbox.models.nested_power_panel import NestedPowerPanel  # noqa: F401,E501
from aionetbox.models.nested_rack import NestedRack  # noqa: F401,E501
from aionetbox.models.status import Status  # noqa: F401,E501


class PowerFeed(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'power_panel': 'NestedPowerPanel',
        'rack': 'NestedRack',
        'name': 'str',
        'status': 'Status',
        'type': 'Status',
        'supply': 'Status',
        'phase': 'Status',
        'voltage': 'int',
        'amperage': 'int',
        'max_utilization': 'int',
        'comments': 'str',
        'tags': 'list[str]',
        'custom_fields': 'object',
        'created': 'date',
        'last_updated': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'power_panel': 'power_panel',
        'rack': 'rack',
        'name': 'name',
        'status': 'status',
        'type': 'type',
        'supply': 'supply',
        'phase': 'phase',
        'voltage': 'voltage',
        'amperage': 'amperage',
        'max_utilization': 'max_utilization',
        'comments': 'comments',
        'tags': 'tags',
        'custom_fields': 'custom_fields',
        'created': 'created',
        'last_updated': 'last_updated'
    }

    def __init__(self, id=None, power_panel=None, rack=None, name=None, status=None, type=None, supply=None, phase=None, voltage=None, amperage=None, max_utilization=None, comments=None, tags=None, custom_fields=None, created=None, last_updated=None):  # noqa: E501
        """PowerFeed - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._power_panel = None
        self._rack = None
        self._name = None
        self._status = None
        self._type = None
        self._supply = None
        self._phase = None
        self._voltage = None
        self._amperage = None
        self._max_utilization = None
        self._comments = None
        self._tags = None
        self._custom_fields = None
        self._created = None
        self._last_updated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.power_panel = power_panel
        if rack is not None:
            self.rack = rack
        self.name = name
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if supply is not None:
            self.supply = supply
        if phase is not None:
            self.phase = phase
        if voltage is not None:
            self.voltage = voltage
        if amperage is not None:
            self.amperage = amperage
        if max_utilization is not None:
            self.max_utilization = max_utilization
        if comments is not None:
            self.comments = comments
        if tags is not None:
            self.tags = tags
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if created is not None:
            self.created = created
        if last_updated is not None:
            self.last_updated = last_updated

    @property
    def id(self):
        """Gets the id of this PowerFeed.  # noqa: E501


        :return: The id of this PowerFeed.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PowerFeed.


        :param id: The id of this PowerFeed.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def power_panel(self):
        """Gets the power_panel of this PowerFeed.  # noqa: E501


        :return: The power_panel of this PowerFeed.  # noqa: E501
        :rtype: NestedPowerPanel
        """
        return self._power_panel

    @power_panel.setter
    def power_panel(self, power_panel):
        """Sets the power_panel of this PowerFeed.


        :param power_panel: The power_panel of this PowerFeed.  # noqa: E501
        :type: NestedPowerPanel
        """
        if power_panel is None:
            raise ValueError("Invalid value for `power_panel`, must not be `None`")  # noqa: E501

        self._power_panel = power_panel

    @property
    def rack(self):
        """Gets the rack of this PowerFeed.  # noqa: E501


        :return: The rack of this PowerFeed.  # noqa: E501
        :rtype: NestedRack
        """
        return self._rack

    @rack.setter
    def rack(self, rack):
        """Sets the rack of this PowerFeed.


        :param rack: The rack of this PowerFeed.  # noqa: E501
        :type: NestedRack
        """

        self._rack = rack

    @property
    def name(self):
        """Gets the name of this PowerFeed.  # noqa: E501


        :return: The name of this PowerFeed.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PowerFeed.


        :param name: The name of this PowerFeed.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this PowerFeed.  # noqa: E501


        :return: The status of this PowerFeed.  # noqa: E501
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PowerFeed.


        :param status: The status of this PowerFeed.  # noqa: E501
        :type: Status
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this PowerFeed.  # noqa: E501


        :return: The type of this PowerFeed.  # noqa: E501
        :rtype: Status
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PowerFeed.


        :param type: The type of this PowerFeed.  # noqa: E501
        :type: Status
        """

        self._type = type

    @property
    def supply(self):
        """Gets the supply of this PowerFeed.  # noqa: E501


        :return: The supply of this PowerFeed.  # noqa: E501
        :rtype: Status
        """
        return self._supply

    @supply.setter
    def supply(self, supply):
        """Sets the supply of this PowerFeed.


        :param supply: The supply of this PowerFeed.  # noqa: E501
        :type: Status
        """

        self._supply = supply

    @property
    def phase(self):
        """Gets the phase of this PowerFeed.  # noqa: E501


        :return: The phase of this PowerFeed.  # noqa: E501
        :rtype: Status
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this PowerFeed.


        :param phase: The phase of this PowerFeed.  # noqa: E501
        :type: Status
        """

        self._phase = phase

    @property
    def voltage(self):
        """Gets the voltage of this PowerFeed.  # noqa: E501


        :return: The voltage of this PowerFeed.  # noqa: E501
        :rtype: int
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """Sets the voltage of this PowerFeed.


        :param voltage: The voltage of this PowerFeed.  # noqa: E501
        :type: int
        """
        if voltage is not None and voltage > 32767:  # noqa: E501
            raise ValueError("Invalid value for `voltage`, must be a value less than or equal to `32767`")  # noqa: E501
        if voltage is not None and voltage < 1:  # noqa: E501
            raise ValueError("Invalid value for `voltage`, must be a value greater than or equal to `1`")  # noqa: E501

        self._voltage = voltage

    @property
    def amperage(self):
        """Gets the amperage of this PowerFeed.  # noqa: E501


        :return: The amperage of this PowerFeed.  # noqa: E501
        :rtype: int
        """
        return self._amperage

    @amperage.setter
    def amperage(self, amperage):
        """Sets the amperage of this PowerFeed.


        :param amperage: The amperage of this PowerFeed.  # noqa: E501
        :type: int
        """
        if amperage is not None and amperage > 32767:  # noqa: E501
            raise ValueError("Invalid value for `amperage`, must be a value less than or equal to `32767`")  # noqa: E501
        if amperage is not None and amperage < 1:  # noqa: E501
            raise ValueError("Invalid value for `amperage`, must be a value greater than or equal to `1`")  # noqa: E501

        self._amperage = amperage

    @property
    def max_utilization(self):
        """Gets the max_utilization of this PowerFeed.  # noqa: E501

        Maximum permissible draw (percentage)  # noqa: E501

        :return: The max_utilization of this PowerFeed.  # noqa: E501
        :rtype: int
        """
        return self._max_utilization

    @max_utilization.setter
    def max_utilization(self, max_utilization):
        """Sets the max_utilization of this PowerFeed.

        Maximum permissible draw (percentage)  # noqa: E501

        :param max_utilization: The max_utilization of this PowerFeed.  # noqa: E501
        :type: int
        """
        if max_utilization is not None and max_utilization > 100:  # noqa: E501
            raise ValueError("Invalid value for `max_utilization`, must be a value less than or equal to `100`")  # noqa: E501
        if max_utilization is not None and max_utilization < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_utilization`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_utilization = max_utilization

    @property
    def comments(self):
        """Gets the comments of this PowerFeed.  # noqa: E501


        :return: The comments of this PowerFeed.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this PowerFeed.


        :param comments: The comments of this PowerFeed.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def tags(self):
        """Gets the tags of this PowerFeed.  # noqa: E501


        :return: The tags of this PowerFeed.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PowerFeed.


        :param tags: The tags of this PowerFeed.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def custom_fields(self):
        """Gets the custom_fields of this PowerFeed.  # noqa: E501


        :return: The custom_fields of this PowerFeed.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this PowerFeed.


        :param custom_fields: The custom_fields of this PowerFeed.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    @property
    def created(self):
        """Gets the created of this PowerFeed.  # noqa: E501


        :return: The created of this PowerFeed.  # noqa: E501
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PowerFeed.


        :param created: The created of this PowerFeed.  # noqa: E501
        :type: date
        """

        self._created = created

    @property
    def last_updated(self):
        """Gets the last_updated of this PowerFeed.  # noqa: E501


        :return: The last_updated of this PowerFeed.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this PowerFeed.


        :param last_updated: The last_updated of this PowerFeed.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PowerFeed, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PowerFeed):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
